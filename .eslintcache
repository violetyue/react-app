[{"E:\\react\\csslayout\\src\\pages\\home.js":"1","E:\\react\\csslayout\\src\\mock\\index.js":"2","E:\\react\\csslayout\\src\\index.js":"3","E:\\react\\csslayout\\src\\App1.js":"4","E:\\react\\csslayout\\src\\pages\\order.js":"5","E:\\react\\csslayout\\src\\pages\\device.js":"6","E:\\react\\csslayout\\src\\pages\\person.js":"7","E:\\react\\csslayout\\src\\frame\\index.js":"8","E:\\react\\csslayout\\src\\router\\routes.js":"9","E:\\react\\csslayout\\src\\loginpage\\login.js":"10"},{"size":6233,"mtime":1607333318671,"results":"11","hashOfConfig":"12"},{"size":96,"mtime":1606893265147,"results":"13","hashOfConfig":"12"},{"size":634,"mtime":1607399259882,"results":"14","hashOfConfig":"12"},{"size":793,"mtime":1607399623786,"results":"15","hashOfConfig":"12"},{"size":280,"mtime":1606971053983,"results":"16","hashOfConfig":"12"},{"size":282,"mtime":1606971064691,"results":"17","hashOfConfig":"12"},{"size":295,"mtime":1606971044689,"results":"18","hashOfConfig":"12"},{"size":1041,"mtime":1606970223662,"results":"19","hashOfConfig":"12"},{"size":553,"mtime":1607399186666,"results":"20","hashOfConfig":"12"},{"size":2756,"mtime":1607412302031,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"318i51",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react\\csslayout\\src\\pages\\home.js",["44","45","46"],"import './shenbei.css';\nimport React, { Component } from 'react';\nimport { Input, DatePicker, Button, Table, Select, Modal, Form } from 'antd';\nimport 'antd/dist/antd.css';\nimport '../mock/index'\nimport Mock from 'mockjs';\nimport { formatCountdown } from 'antd/lib/statistic/utils';\nimport FormItem from 'antd/lib/form/FormItem';\nconst Random = Mock.Random;\n\nconst { Option } = Select;\n\nclass home extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      columns: [{\n        title: 'Title',\n        dataIndex: 'title',\n      }, {\n        title: 'Price',\n        dataIndex: 'price',\n      }, {\n        title: 'Action',\n        dataIndex: 'delete',\n        key: 'delete',\n        render: (text,record,index) => <a data-index={index} onClick={this.deleteItem.bind(this,text,record,index)}>Delete</a>\n      }],\n      inputTitle: '',\n      inputPrice: '',\n      data: [],\n      modalAddInfoVisible: false,\n    }\n  }\n\n  openModalAddInfo = (type)=>{\n    this.setState({modalAddInfoVisible: true})\n  }\n\n  componentDidMount() {\n    //页面加载时就调用查询\n    this.showData()\n  }\n\n\n  showData = () => {\n    const list = localStorage.list;\n    if (list) {\n      //判断是否存在list，localStorage\n      const data = JSON.parse(localStorage.list);\n      this.setState({data})\n    }\n  }\n\n  saveItem = () => {\n    const {data} = this.state;\n    //localStorage中的值是按照字符保存的，所以每次需要用JSON.stringify及JSON.parse转换\n    localStorage.list = JSON.stringify(data);\n  }\n\n  addItem = () => {\n    // const data = JSON.parse(localStorage.list)\n    //因为state中的数据和localStorage的数据是一致的这里，我们就偷懒使用state中的data\n    const {data} = this.state;\n    let arr = data.slice(0)\n    //使用makeNewItem来生成新的数据\n    let newItem = this.makeNewItem()\n    arr.push(newItem)\n    this.setState({data:arr}, ()=>{this.saveItem()})\n  }\n\n  makeNewItem = () => {\n    const { data } = this.state;\n    //生成唯一的key\n    let lastKey = 1;\n    if (data.length){\n      lastKey = data[data.length - 1].key\n    }\n    let newItem = {}\n    newItem.key = lastKey + 1;\n    newItem.title = this.state.inputTitle\n    newItem.price = this.state.inputPrice\n    return newItem\n  }\n  deleteItem = (text, record, index) => {\n    //这里是配置项中我们传入的参数，其中index我们就直接可以在splice中使用\n    console.log(text, record, index)\n    // const data = JSON.parse(localStorage.list)\n    //因为state中的数据和localStorage的数据是一致的这里，我们就偷懒使用state中的data\n    const {data} = this.state;\n    let arr = data.slice(0)\n    arr.splice(index,1)\n    //数组slice和splice语法再掌握一下\n    this.setState({data:arr}, ()=>{this.saveItem()})\n  }\n\n  titleInput(e) {\n    this.setState({\n      inputTitle: e.target.value,\n    })\n  }\n  priceInput(e) {\n    this.setState({\n      inputPrice: e.target.value,\n    })\n  }\n\n  handleOk=e=>{\n    this.formRef.current.validateFields()\n            .then(values => {\n                this.formRef.current.resetFields();\n                this.addItem(this);\n                this.setState({modalAddInfoVisible: false});\n            })\n            .catch(info=>{\n              console.log('Validate failed:', info);\n            })\n  }\n\n  formRef = React.createRef();\n\n  render() { \n    let data = this.state.data\n    let columns = this.state.columns\n    \n    return (\n      <div>\n            <div className='inputarea'>\n              <div className='name'>\n                <label htmlFor='name'>Name: </label>\n                <Input placeholder=\"name\" style={{ width: '80%' }} />\n              </div>\n              <div className='period'>\n                <label>Period: </label>\n                <DatePicker.RangePicker style={{ width: '85%' }} />\n              </div>\n              <div className='statusarea'>\n                <label>Status: </label>\n                <Select defaultValue='Not Start'>\n                  <Option value='not start'>Not start</Option>\n                  <Option value='processing'>Processing</Option>\n                  <Option value='finished'>Finished</Option>\n                </Select>\n              </div>\n              <div className='buttonarea'>\n                <Button>Submit</Button>\n              </div>  \n            </div>\n            <div className='addarea'>\n              <Button\n                onClick={()=>this.openModalAddInfo(\"modalAddInfo\")}\n              >\n              Input here\n              </Button>\n              <Modal \n                visible={this.state.modalAddInfoVisible} \n                title=\"Input item\" \n                cancelText=\"Cancel\" \n                onCancel={()=>{this.setState({modalAddInfoVisible: false})}}\n                okText=\"Input\" \n                onOk={this.handleOk}\n              >\n                <Form ref={this.formRef} name='input-ref'>\n                  <FormItem \n                    name='titlearea'\n                    label='Title: '\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Title is required!',\n                      },\n                     ]}\n                  >\n                  <Input value={this.state.inputTitle} onChange={this.titleInput.bind(this)}/>\n                  </FormItem>\n                  <FormItem\n                    name='pricearea'\n                    label='Price: '\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Price is required!',\n                      },\n                    ]}\n                  >\n                  <Input value={this.state.inputPrice} onChange={this.priceInput.bind(this)}/>\n                  </FormItem>\n                </Form>    \n              </Modal>\n            </div>\n            <div className='tablearea'>\n              <Button onClick={this.addItem.bind(this)}>Add</Button>\n              <Button onClick={this.showData.bind(this)}>Show</Button>\n              {\n                <Table columns={columns} dataSource={data} />\n              }\n              \n            </div>\n            \n      </div>\n    );\n  }\n}\n \nexport default home;","E:\\react\\csslayout\\src\\mock\\index.js",[],"E:\\react\\csslayout\\src\\index.js",["47"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport './index.css';\nimport App1 from './App1';\nimport reportWebVitals from './reportWebVitals';\nimport { loginRoutes } from './router/routes';\n\n\n\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route path='/pages' render={routeProps=><App1 {...routeProps} />}/>\n      {loginRoutes.map(route => {\n        return <Route key={route.path} {...route}\n      })}\n    </Switch>\n    <Redirect to='/loginpage/login' from='/' />\n  </Router>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","E:\\react\\csslayout\\src\\App1.js",["48"],"E:\\react\\csslayout\\src\\pages\\order.js",[],"E:\\react\\csslayout\\src\\pages\\device.js",[],"E:\\react\\csslayout\\src\\pages\\person.js",[],"E:\\react\\csslayout\\src\\frame\\index.js",[],"E:\\react\\csslayout\\src\\router\\routes.js",[],"E:\\react\\csslayout\\src\\loginpage\\login.js",[],{"ruleId":"49","severity":1,"message":"50","line":7,"column":10,"nodeType":"51","messageId":"52","endLine":7,"endColumn":25},{"ruleId":"49","severity":1,"message":"53","line":9,"column":7,"nodeType":"51","messageId":"52","endLine":9,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":27,"column":40,"nodeType":"56","endLine":27,"endColumn":117},{"ruleId":null,"fatal":true,"severity":2,"message":"57","line":18,"column":7},{"ruleId":"49","severity":1,"message":"58","line":2,"column":25,"nodeType":"51","messageId":"52","endLine":2,"endColumn":33},"no-unused-vars","'formatCountdown' is defined but never used.","Identifier","unusedVar","'Random' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Parsing error: Unexpected token\n\n  16 |       {loginRoutes.map(route => {\n  17 |         return <Route key={route.path} {...rou}\n> 18 |       })}\n     |       ^\n  19 |     </Switch>\n  20 |     <Redirect to='/loginpage/login' from='/' />\n  21 |   </Router>,","'Redirect' is defined but never used."]